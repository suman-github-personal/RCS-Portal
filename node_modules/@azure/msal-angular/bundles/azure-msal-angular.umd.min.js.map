{"version":3,"sources":["../../src/constants.ts","../../src/msal.service.ts","../../src/msal.guard.ts","../../src/msal.interceptor.ts","../../src/msal.broadcast.service.ts","../../src/msal.module.ts"],"names":["MSAL_INSTANCE","InjectionToken","MSAL_GUARD_CONFIG","MSAL_INTERCEPTOR_CONFIG","name","version","MsalService","instance","location","this","hash","path","split","pop","redirectHash","prototype","acquireTokenPopup","request","from","acquireTokenRedirect","acquireTokenSilent","silentRequest","handleRedirectObservable","handleRedirect","handleRedirectPromise","loginPopup","loginRedirect","logout","logoutRequest","ssoSilent","getLogger","logger","clone","setLogger","Injectable","Inject","args","Location","MsalGuard","msalGuardConfig","authService","getDestinationUrl","verbose","baseElements","document","getElementsByTagName","baseUrl","normalize","length","href","window","origin","pathUrl","prepareExternalUrl","startsWith","loginInteractively","url","_this","interactionType","InteractionType","Popup","Object","assign","authRequest","pipe","map","catchError","of","redirectStartPage","canActivate","route","state","Redirect","BrowserConfigurationAuthError","UrlString","hashContainsKnownProperties","BrowserUtils","isInIframe","warning","concatMap","getAllAccounts","MsalInterceptor","msalInterceptorConfig","intercept","req","next","scopes","getScopesForEndpoint","account","EMPTY","switchMap","result","headers","set","accessToken","requestClone","handle","endpoint","keyMatchesEndpointArray","Array","protectedResourceMap","keys","filter","key","StringUtils","matchPattern","keyForEndpoint","get","msalInstance","_msalSubject","Subject","msalSubject$","asObservable","addEventCallback","message","MsalModule","forRoot","guardConfig","interceptorConfig","ngModule","providers","provide","useValue","NgModule","declarations","imports","CommonModule","MsalBroadcastService"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { InjectionToken } from \"@angular/core\";\r\n\r\nexport const MSAL_INSTANCE = new InjectionToken<string>(\"MSAL_INSTANCE\");\r\n\r\nexport const MSAL_GUARD_CONFIG = new InjectionToken<string>(\"MSAL_GUARD_CONFIG\");\r\n\r\nexport const MSAL_INTERCEPTOR_CONFIG = new InjectionToken<string>(\"MSAL_INTERCEPTOR_CONFIG\");\r\n\r\nexport const name = \"@azure/msal-angular\";\r\n\r\nexport const version = \"2.0.0-alpha.0\";\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Location } from \"@angular/common\";\r\nimport {\r\n    IPublicClientApplication,\r\n    EndSessionRequest,\r\n    AuthenticationResult,\r\n    RedirectRequest,\r\n    SilentRequest,\r\n    PopupRequest,\r\n    SsoSilentRequest,\r\n    Logger\r\n} from \"@azure/msal-browser\";\r\nimport { MSAL_INSTANCE, name, version } from \"./constants\";\r\nimport { Observable, from } from \"rxjs\";\r\nimport { IMsalService } from \"./IMsalService\";\r\n\r\n@Injectable()\r\nexport class MsalService implements IMsalService {\r\n    private redirectHash: string;\r\n    private logger: Logger;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INSTANCE) public instance: IPublicClientApplication,\r\n        private location: Location\r\n    ) {\r\n        const hash = this.location.path(true).split(\"#\").pop();\r\n        if (hash) {\r\n            this.redirectHash = `#${hash}`;\r\n        }\r\n    }\r\n\r\n    acquireTokenPopup(request: PopupRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.acquireTokenPopup(request));\r\n    }\r\n    acquireTokenRedirect(request: RedirectRequest): Observable<void> {\r\n        return from(this.instance.acquireTokenRedirect(request));\r\n    }\r\n    acquireTokenSilent(silentRequest: SilentRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.acquireTokenSilent(silentRequest));\r\n    }\r\n    handleRedirectObservable(): Observable<AuthenticationResult> {\r\n        const handleRedirect = from(this.instance.handleRedirectPromise(this.redirectHash));\r\n        this.redirectHash = \"\";\r\n        return handleRedirect;\r\n    }\r\n    loginPopup(request?: PopupRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.loginPopup(request));\r\n    }\r\n    loginRedirect(request?: RedirectRequest): Observable<void> {\r\n        return from(this.instance.loginRedirect(request));\r\n    }\r\n    logout(logoutRequest?: EndSessionRequest): Observable<void> {\r\n        return from(this.instance.logout(logoutRequest));\r\n    }\r\n    ssoSilent(request: SsoSilentRequest): Observable<AuthenticationResult> {\r\n        return from(this.instance.ssoSilent(request));\r\n    }\r\n    getLogger(): Logger {\r\n        if (!this.logger) {\r\n            this.logger = this.instance.getLogger().clone(name, version);\r\n        }\r\n        return this.logger;\r\n    }\r\n    setLogger(logger: Logger): void {\r\n        this.logger = logger.clone(name, version);\r\n        this.instance.setLogger(logger);\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from \"@angular/router\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { Injectable, Inject } from \"@angular/core\";\r\nimport { Location } from \"@angular/common\";\r\nimport { InteractionType, BrowserConfigurationAuthError, BrowserUtils, UrlString } from \"@azure/msal-browser\";\r\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nimport { MSAL_GUARD_CONFIG } from \"./constants\";\r\nimport { concatMap, catchError, map } from \"rxjs/operators\";\r\nimport { Observable, of } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class MsalGuard implements CanActivate {\r\n    constructor(\r\n        @Inject(MSAL_GUARD_CONFIG) private msalGuardConfig: MsalGuardConfiguration,\r\n        private authService: MsalService,\r\n        private location: Location,\r\n    ) { }\r\n\r\n    /**\r\n     * Builds the absolute url for the destination page\r\n     * @param path Relative path of requested page\r\n     * @returns Full destination url\r\n     */\r\n    getDestinationUrl(path: string): string {\r\n        this.authService.getLogger().verbose(\"Guard - getting destination url\");\r\n        // Absolute base url for the application (default to origin if base element not present)\r\n        const baseElements = document.getElementsByTagName(\"base\");\r\n        const baseUrl = this.location.normalize(baseElements.length ? baseElements[0].href : window.location.origin);\r\n\r\n        // Path of page (including hash, if using hash routing)\r\n        const pathUrl = this.location.prepareExternalUrl(path);\r\n\r\n        // Hash location strategy\r\n        if (pathUrl.startsWith(\"#\")) {\r\n            this.authService.getLogger().verbose(\"Guard - destination by hash routing\");\r\n            return `${baseUrl}/${pathUrl}`;\r\n        }\r\n\r\n        /*\r\n         * If using path location strategy, pathUrl will include the relative portion of the base path (e.g. /base/page).\r\n         * Since baseUrl also includes /base, can just concatentate baseUrl + path\r\n         */\r\n        return `${baseUrl}${path}`;\r\n    }\r\n\r\n    private loginInteractively(url: string): Observable<boolean> {\r\n        if (this.msalGuardConfig.interactionType === InteractionType.Popup) {\r\n            this.authService.getLogger().verbose(\"Guard - logging in by popup\");\r\n            return this.authService.loginPopup({ ...this.msalGuardConfig.authRequest })\r\n                .pipe(\r\n                    map(() => {\r\n                        this.authService.getLogger().verbose(\"Guard - login by popup successful, can activate\");\r\n                        return true;\r\n                    }),\r\n                    catchError(() => of(false))\r\n                );\r\n        }\r\n\r\n        this.authService.getLogger().verbose(\"Guard - logging in by redirect\");\r\n        const redirectStartPage = this.getDestinationUrl(url);\r\n        this.authService.loginRedirect({\r\n            redirectStartPage,\r\n            ...this.msalGuardConfig.authRequest\r\n        });\r\n        return of(false);\r\n    }\r\n\r\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\r\n        if (this.msalGuardConfig.interactionType !== InteractionType.Popup && this.msalGuardConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Guard. InteractionType.Popup or InteractionType.Redirect must be provided in the MsalGuardConfiguration\");\r\n        }\r\n        this.authService.getLogger().verbose(\"MSAL Guard activated\");\r\n\r\n        /*\r\n         * If a page with MSAL Guard is set as the redirect for acquireTokenSilent,\r\n         * short-circuit to prevent redirecting or popups.\r\n         * TODO: Update to allow running in iframe once allowRedirectInIframe is implemented\r\n         */\r\n        if (UrlString.hashContainsKnownProperties(window.location.hash) && BrowserUtils.isInIframe()) {\r\n            this.authService.getLogger().warning(\"Guard - redirectUri set to page with MSAL Guard. It is recommended to not set redirectUri to a page that requires authentication.\");\r\n            return of(false);\r\n        }\r\n\r\n        return this.authService.handleRedirectObservable()\r\n            .pipe(\r\n                concatMap(() => {\r\n                    if (!this.authService.instance.getAllAccounts().length) {\r\n                        this.authService.getLogger().verbose(\"Guard - no accounts retrieved, log in required to activate\");\r\n                        return this.loginInteractively(state.url);\r\n                    }\r\n                    this.authService.getLogger().verbose(\"Guard - account retrieved, can activate\");\r\n                    return of(true);\r\n                }),\r\n                catchError(() => {\r\n                    this.authService.getLogger().verbose(\"Guard - error while logging in, unable to activate\");\r\n                    return of(false);\r\n                })\r\n            );\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport {\r\n    HttpRequest,\r\n    HttpHandler,\r\n    HttpEvent,\r\n    HttpInterceptor\r\n} from \"@angular/common/http\";\r\nimport { Observable, EMPTY } from \"rxjs\";\r\nimport { switchMap, catchError } from \"rxjs/operators\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { AuthenticationResult, BrowserConfigurationAuthError, InteractionType, StringUtils } from \"@azure/msal-browser\";\r\nimport { Injectable, Inject } from \"@angular/core\";\r\nimport { MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\nimport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\r\n\r\n@Injectable()\r\nexport class MsalInterceptor implements HttpInterceptor {\r\n    constructor(\r\n        @Inject(MSAL_INTERCEPTOR_CONFIG) private msalInterceptorConfig: MsalInterceptorConfiguration,\r\n        private authService: MsalService\r\n    ) {}\r\n\r\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n        if (this.msalInterceptorConfig.interactionType !== InteractionType.Popup && this.msalInterceptorConfig.interactionType !== InteractionType.Redirect) {\r\n            throw new BrowserConfigurationAuthError(\"invalid_interaction_type\", \"Invalid interaction type provided to MSAL Interceptor. InteractionType.Popup, InteractionType.Redirect must be provided in the msalInterceptorConfiguration\");\r\n        }\r\n\r\n        this.authService.getLogger().verbose(\"MSAL Interceptor activated\");\r\n        const scopes = this.getScopesForEndpoint(req.url);\r\n        const account = this.authService.instance.getAllAccounts()[0];\r\n\r\n        if (!scopes || scopes.length === 0) {\r\n            this.authService.getLogger().verbose(\"Interceptor - no scopes for endpoint\");\r\n            return next.handle(req);\r\n        }\r\n\r\n        // Note: For MSA accounts, include openid scope when calling acquireTokenSilent to return idToken\r\n        return this.authService.acquireTokenSilent({...this.msalInterceptorConfig.authRequest, scopes, account})\r\n            .pipe(\r\n                catchError(() => {\r\n                    if (this.msalInterceptorConfig.interactionType === InteractionType.Popup) {\r\n                        this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by popup\");\r\n                        return this.authService.acquireTokenPopup({...this.msalInterceptorConfig.authRequest, scopes});\r\n                    }\r\n                    this.authService.getLogger().verbose(\"Interceptor - error acquiring token silently, acquiring by redirect\");\r\n                    const redirectStartPage = window.location.href;\r\n                    this.authService.acquireTokenRedirect({...this.msalInterceptorConfig.authRequest, scopes, redirectStartPage});\r\n                    return EMPTY;\r\n                }),\r\n                switchMap((result: AuthenticationResult) => {\r\n                    this.authService.getLogger().verbose(\"Interceptor - setting authorization headers\");\r\n                    const headers = req.headers\r\n                        .set(\"Authorization\", `Bearer ${result.accessToken}`);\r\n\r\n                    const requestClone = req.clone({headers});\r\n                    return next.handle(requestClone);\r\n                })\r\n            );\r\n\r\n    }\r\n\r\n    private getScopesForEndpoint(endpoint: string): Array<string>|null {\r\n        this.authService.getLogger().verbose(\"Interceptor - getting scopes for endpoint\");\r\n        const protectedResourcesArray = Array.from(this.msalInterceptorConfig.protectedResourceMap.keys());\r\n        const keyMatchesEndpointArray = protectedResourcesArray.filter(key => {\r\n            return StringUtils.matchPattern(key, endpoint);\r\n        });\r\n\r\n        // process all protected resources and send the first matched resource\r\n        if (keyMatchesEndpointArray.length > 0) {\r\n            const keyForEndpoint = keyMatchesEndpointArray[0];\r\n            if (keyForEndpoint) {\r\n                return this.msalInterceptorConfig.protectedResourceMap.get(keyForEndpoint);\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Inject, Injectable } from \"@angular/core\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { MSAL_INSTANCE } from \"./constants\";\r\nimport { EventMessage, IPublicClientApplication } from \"@azure/msal-browser\";\r\n\r\n@Injectable()\r\nexport class MsalBroadcastService {\r\n    private _msalSubject: Subject<EventMessage>;\r\n    public msalSubject$: Observable<EventMessage>;\r\n\r\n    constructor(\r\n        @Inject(MSAL_INSTANCE) private msalInstance: IPublicClientApplication\r\n    ) {\r\n        this._msalSubject = new Subject<EventMessage>();\r\n        this.msalSubject$  = this._msalSubject.asObservable();\r\n        this.msalInstance.addEventCallback((message: EventMessage) => {\r\n            this._msalSubject.next(message);\r\n        });\r\n    }\r\n}\r\n","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\r\nimport { MsalGuardConfiguration } from \"./msal.guard.config\";\r\nimport { MsalInterceptorConfiguration } from \"./msal.interceptor.config\";\r\nimport { MsalGuard } from \"./msal.guard\";\r\nimport { MsalBroadcastService } from \"./msal.broadcast.service\";\r\nimport { MsalService } from \"./msal.service\";\r\nimport { MSAL_INSTANCE , MSAL_GUARD_CONFIG, MSAL_INTERCEPTOR_CONFIG } from \"./constants\";\r\n\r\n@NgModule({\r\n    declarations: [],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    providers: [\r\n        MsalGuard,\r\n        MsalBroadcastService\r\n    ]\r\n})\r\nexport class MsalModule {\r\n    static forRoot(\r\n        msalInstance: IPublicClientApplication,\r\n        guardConfig: MsalGuardConfiguration,\r\n        interceptorConfig: MsalInterceptorConfiguration\r\n    ): ModuleWithProviders<MsalModule> {\r\n        return {\r\n            ngModule: MsalModule,\r\n            providers: [\r\n                {\r\n                    provide: MSAL_INSTANCE,\r\n                    useValue: msalInstance\r\n                },\r\n                {\r\n                    provide: MSAL_GUARD_CONFIG,\r\n                    useValue: guardConfig\r\n                },\r\n                {\r\n                    provide: MSAL_INTERCEPTOR_CONFIG,\r\n                    useValue: interceptorConfig\r\n                },\r\n                MsalService\r\n            ]\r\n        };\r\n    }\r\n\r\n}\r\n"]}